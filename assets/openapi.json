{
  "openapi": "3.0.0",
  "info": {
    "title": "MilkBot lactation API",
    "description": "## MilkBot Fitting\nThis service uses the MilkBot fitting engine to fit the MilkBot\nmodel to lactation data. The\nreturned parameter set can be substituted into the MilkBot\nequation<br><br> ((1 - E^((offset - t)/ramp)/2)*scale)/E^(decay X t)\n<br><br>to generate predicted milk production at any time in the lactation,\nwhere t is time since calving (in days, DIM=0 at calving) and E is Euler's\nnumber.<br><br> Simple formulas described at the support URL can calculate\npersistence, M305, or cumulative milk between dates. For a fuller description of \nthe model see [Quantifying inter-group variability in lactation curve shape and \nmagnitude with the MilkBotÂ® lactation model](https://peerj.com/articles/54/)\n## API Keys\nTo use this service, a valid API key must be in a `X-API-Key` header of each request. \nFor a free API Key, contact Jim Ehrlich jehrlich@MilkBot.com\n## Priors Tree\nThe fitting process uses Bayesian prior expectations as the expected means and standar deviation of\nparameter values as well as expected sd of fitting error. If priors are\nprovided, they will be used. Otherwise default values based on breed and\nparity will be used. Use `GET /priorsTree` to see default priors.\nThe PriorsTree uses a `discriminator` at each node to value lactations to an appropriate\n`Priors`. \n## Customizing\n- **Priors** It is easy to generate a customized PriorsTree by fitting a training set of lactations,\nthen using the averages from that set as the priors for future fittings.  \n- **Options** The optional `Options` object may be included with a `FittingJob` to control what\ndata is returned.\n- **Milk Units**  Milk values may be in Kg (the default) or pounds (by specifying \"milkUnit\": \"Lb\")\n## Data constraints\n- Fitting Jobs may exceed the maximum memory available to the fitting function. If that becomes a problem\nplease contact us and we will consider increasing the memory pool. A Workaround is to fit in small batches or \nas individual lactations.\n",
    "termsOfService": "http://MilkBot.com/terms/",
    "contact": {
      "name": "Jim Ehrlich, DVM",
      "email": "jehrlich@MilkBot.com"
    },
    "version": "2.0.0"
  },
  "servers": [
    {
      "description": "USA",
      "url": "https://milkbot.com"
    },
    {
      "description": "Europe",
      "url": "https://europe-west1-numeric-analogy-337601.cloudfunctions.net/milkBot-fitter"
    }
  ],
  "security": [
    {
      "ApiKeyAuth": []
    }
  ],
  "paths": {
    "/fitLactation": {
      "post": {
        "operationId": "fit_single",
        "summary": "Fit single lactation",
        "description": "Fit a single lactation from the supplied array of  (DIM, milk weight) data pairs.",
        "requestBody": {
          "description": "a single lactation",
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "lactation"
                ],
                "properties": {
                  "lactation": {
                    "$ref": "#/components/schemas/Lactation"
                  },
                  "priors": {
                    "$ref": "#/components/schemas/Priors"
                  },
                  "options": {
                    "$ref": "#/components/schemas/FitOptions"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Lactation fitted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Fit"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/fitLactations": {
      "post": {
        "operationId": "fit_lactations",
        "summary": "Fit a list of lactations.",
        "description": "Fit a group of lactations returning fitted parameter values. If '**_priors_**' are supplied they will be used. Otherwise fitting will be done from defaults.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "fittingJob"
                ],
                "properties": {
                  "fittingJob": {
                    "$ref": "#/components/schemas/FittingJob"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "fitted parameter values for lactations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FittingResult"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/version": {
      "get": {
        "operationId": "get_version",
        "summary": "version number of server",
        "description": "Get the current version number of the server",
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Version"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/priorstree": {
      "get": {
        "operationId": "get_priors",
        "summary": "Get default tree of prior expectations",
        "description": "Get the default Priors that will be used if an alternative is not supplied by the user",
        "responses": {
          "200": {
            "description": "Lactation fitted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Params"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "apiKey",
        "name": "X-API-KEY",
        "in": "header"
      }
    },
    "responses": {
      "Unauthorized": {
        "description": "401 Users must log in"
      },
      "BadRequest": {
        "description": "The server could not understand the request due to invalid syntax.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "NotFound": {
        "description": "The server can not find the requested resource.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    },
    "schemas": {
      "Version": {
        "type": "string",
        "description": "version number of server"
      },
      "MilkUnit": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "abbreviated name of measurement unit lb=pounds, kg=kilograms, l=liters, g=grams",
            "default": "kg",
            "example": "kg",
            "enum": [
              "lb",
              "kg",
              "l",
              "g"
            ]
          }
        },
        "description": "Unit of measurement used for scale and milk weights, defaulting to kg."
      },
      "MilkPt": {
        "description": "Measured milk production data point.",
        "required": [
          "dim",
          "milk"
        ],
        "type": "object",
        "properties": {
          "dim": {
            "description": "Days since calving date (DIM).",
            "type": "number",
            "format": "integer",
            "example": 33
          },
          "milk": {
            "description": "quantity of milk produced in one day, or a fraction of a day if **_dayFraction_** is supplied. Milk is measured in units specified by **_milkUnit_**, defaulting to kg",
            "type": "number",
            "format": "float",
            "example": 21
          },
          "dayFraction": {
            "description": "fraction of one day's production that **_milk_** represents, defaulting to 1.0",
            "type": "number",
            "format": "float",
            "default": 1,
            "example": 0.5
          }
        }
      },
      "Lactation": {
        "description": "A single lactation of any length.",
        "required": [
          "lacKey",
          "points"
        ],
        "type": "object",
        "properties": {
          "lacKey": {
            "type": "string",
            "example": "Bossie123",
            "description": "an identifier to key this lactation. **_lacKey_** values must be unique within a LactationList."
          },
          "breed": {
            "type": "string",
            "description": "breed of cow",
            "default": "H",
            "example": "J"
          },
          "parity": {
            "type": "number",
            "description": "parity of this lactation",
            "format": "integer",
            "default": 2,
            "example": 1
          },
          "points": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MilkPt"
            }
          }
        }
      },
      "Params": {
        "description": "Parameter set for the MilkBot model",
        "required": [
          "decay",
          "ramp",
          "scale"
        ],
        "type": "object",
        "properties": {
          "scale": {
            "description": "Overall scale of milk production in units specified by milkUnit. The MilkBot&reg; model can be converted to another unit of measurement for milk simply by multiplying the scale parameter by an appropriate conversion factor",
            "format": "float",
            "example": 25.3
          },
          "ramp": {
            "description": "Length of ramp-up period at start of lactation, in **days**.",
            "type": "number",
            "example": 20,
            "format": "float"
          },
          "offset": {
            "type": "number",
            "description": "Offset between calving and theoretical start of lactation in **days**.",
            "format": "float",
            "example": 0,
            "default": 0
          },
          "decay": {
            "description": "first order decay constant in inverse-days that controls the decline in milk production.",
            "type": "number",
            "format": "float",
            "example": 0.02
          },
          "milkUnit": {
            "$ref": "#/components/schemas/MilkUnit"
          }
        }
      },
      "PriorsTree": {
        "description": "Recursive tree structure with a Polymorphic nodes (leaf or branch) ",
        "type": "object",
        "required": [
          "_type",
          "node"
        ],
        "properties": {
          "_type": {
            "description": "type of the tree, a PriorsLeaf or a PriorsBranch",
            "type": "string",
            "enum": [
              "priorsbranch",
              "priorsleaf"
            ],
            "example": "priorsbranch"
          },
          "node": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PriorsLeaf"
              },
              {
                "$ref": "#/components/schemas/PriorsBranch"
              }
            ]
          }
        }
      },
      "Priors": {
        "description": "Optional Bayesian prior expectations for use by fitting engine. If not provided, defaults based on breed and parity will be used. **_means_** are the expected mean parameter values for the population and **_sd_** are expected standard deviation of parameter values for the population **_seMilk_** is expected standard error of milk measurements excluding the effects of a normal lactation curve",
        "type": "object",
        "required": [
          "means",
          "sd",
          "seMilk"
        ],
        "properties": {
          "means": {
            "$ref": "#/components/schemas/Params"
          },
          "sd": {
            "$ref": "#/components/schemas/Params"
          },
          "seMilk": {
            "description": "standard error in measurement of milk per day",
            "type": "number",
            "format": "float",
            "example": 5.2
          },
          "milkUnit": {
            "$ref": "#/components/schemas/MilkUnit"
          }
        }
      },
      "PriorsLeaf": {
        "description": "A terminal leaf of a PriorsTree with Priors for fitting a particular class of lactations.",
        "type": "object",
        "required": [
          "_type",
          "node"
        ],
        "properties": {
          "_type": {
            "description": "type of PriorsTree, always \"priorsleaf\"",
            "type": "string",
            "enum": [
              "priorsleaf"
            ],
            "example": "priorsleaf"
          },
          "node": {
            "$ref": "#/components/schemas/Priors"
          }
        }
      },
      "FilterableLeaf": {
        "description": "a Priorstree with a LacFilter function that can be used to determine whether the node is suitable for a particular lactation.",
        "type": "object",
        "required": [
          "filter",
          "node"
        ],
        "properties": {
          "filter": {
            "description": "the filtering function",
            "oneOf": [
              {
                "$ref": "#/components/schemas/NumberMatch"
              },
              {
                "$ref": "#/components/schemas/StringMatch"
              },
              {
                "$ref": "#/components/schemas/EqualOrGreater"
              }
            ],
            "$ref": "#/components/schemas/LacFilter"
          },
          "node": {
            "$ref": "#/components/schemas/PriorsTree"
          }
        }
      },
      "PriorsBranch": {
        "description": "A branch in the briorsTree with a list containing filterable sub-trees or leaves.",
        "type": "object",
        "required": [
          "_type",
          "node",
          "fieldName"
        ],
        "properties": {
          "_type": {
            "description": "type of the node, a leaf or a branch",
            "type": "string",
            "enum": [
              "priorsbranch",
              "priorsleaf"
            ],
            "example": "priorsbranch"
          },
          "node": {
            "type": "array",
            "description": "a list of either sub-trees or leaves to be filtered",
            "items": {
              "$ref": "#/components/schemas/FilterableLeaf"
            }
          },
          "fieldName": {
            "description": "Name of field in input Lactation holding values on which the node list will be filtered",
            "type": "string",
            "example": "parity"
          },
          "default": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PriorsLeaf"
              },
              {
                "$ref": "#/components/schemas/PriorsBranch"
              }
            ]
          }
        }
      },
      "LacFilter": {
        "description": "Fitiltering function returning a boolean whether the object passes.",
        "type": "object",
        "required": [
          "_type",
          "value"
        ],
        "properties": {
          "_type": {
            "description": "type of the filter",
            "type": "string",
            "enum": [
              "NumberMatch",
              "StringMatch",
              "EqualOrGreater"
            ]
          },
          "value": {
            "description": "the value a lactation must have in the field specified by the parent PriorsBranch.fieldName to pass the filter",
            "$ref": "#/components/schemas/LacFilter"
          }
        }
      },
      "NumberMatch": {
        "description": "matches lactations with  a number equal to the value of the NumberMatch.",
        "type": "object",
        "required": [
          "_type",
          "value"
        ],
        "properties": {
          "_type": {
            "description": "type of the filter",
            "type": "string",
            "enum": [
              "NumberMatch"
            ]
          },
          "value": {
            "description": "the value a lactation must have in the field specified by the parent PriorsBranch.fieldName to pass the filter",
            "type": "number"
          }
        }
      },
      "EqualOrGreater": {
        "description": "matches lactations with  a number equal to or greater than the value of the EqualOrGreater.",
        "type": "object",
        "required": [
          "_type",
          "value"
        ],
        "properties": {
          "_type": {
            "description": "type of the filter",
            "type": "string",
            "enum": [
              "EqualOrGreater"
            ]
          },
          "value": {
            "description": "the value a lactation must have >= in the field specified by the parent PriorsBranch.fieldName to pass the filter",
            "type": "number"
          }
        }
      },
      "StringMatch": {
        "description": "matches lactations with  a string equal to the value of the NumberMatch, ignoring case.",
        "type": "object",
        "required": [
          "_type",
          "value"
        ],
        "properties": {
          "_type": {
            "description": "type of the filter",
            "type": "string",
            "enum": [
              "StringMatch"
            ]
          },
          "value": {
            "description": "the value a lactation must have in the field specified by the parent PriorsBranch.fieldName to pass the filter",
            "type": "string"
          }
        }
      },
      "FittingJob": {
        "description": "A set of lactations to fit with optional priors tree and fit options..",
        "required": [
          "lactationSet"
        ],
        "type": "object",
        "properties": {
          "lactationSet": {
            "$ref": "#/components/schemas/LactationSet"
          },
          "priorsTree": {
            "$ref": "#/components/schemas/PriorsTree"
          },
          "options": {
            "$ref": "#/components/schemas/FitOptions"
          }
        }
      },
      "FittingResult": {
        "description": "the result of fitting a FittingJob, structured according to the FitOption.",
        "required": [
          "fits",
          "errors"
        ],
        "type": "object",
        "properties": {
          "fits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Fit"
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "LactationSet": {
        "description": "A set of lactations with optional milk unit (Kg is default).",
        "required": [
          "lactations"
        ],
        "type": "object",
        "properties": {
          "name": {
            "description": "name for this group of lactations, such as herd name or group",
            "type": "string",
            "example": "Example Farm"
          },
          "lactations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Lactation"
            }
          },
          "milkUnit": {
            "$ref": "#/components/schemas/MilkUnit"
          }
        }
      },
      "FitOptions": {
        "description": "Options to be used in fitting and returning results",
        "type": "object",
        "properties": {
          "returnInputData": {
            "description": "Should all milk data be returned in the response, or only the fitted parameters and lactation key?",
            "type": "boolean",
            "default": false,
            "example": false
          },
          "returnPath": {
            "description": "Should parameters for each step in the fitting of each lactation be returned?",
            "type": "boolean",
            "default": false,
            "example": false
          },
          "returnDiscriminatorPath": {
            "description": "Should path chosen to choose priors for thios lactation be returned?",
            "type": "boolean",
            "default": false,
            "example": false
          },
          "fitEngine": {
            "description": "name of fitting engine to use.",
            "type": "string",
            "default": "AnnealingFitter@2.0",
            "example": "AnnealingFitter@2.0"
          },
          "fitObjective": {
            "description": "Name of objective function to use in fitting.",
            "type": "string",
            "default": "MB1@2.0",
            "example": "MB1@2.0"
          },
          "preferredMilkUnit": {
            "description": "Milk unit to use in returned fits (not currently implemented).",
            "type": "string",
            "default": "Kg",
            "example": "Kg"
          }
        }
      },
      "Fit": {
        "type": "object",
        "required": [
          "lacKey",
          "fittedParams",
          "n",
          "seMilk",
          "priors"
        ],
        "properties": {
          "lacKey": {
            "type": "string"
          },
          "fittedParams": {
            "$ref": "#/components/schemas/Params"
          },
          "lactation": {
            "$ref": "#/components/schemas/Lactation"
          },
          "priors": {
            "$ref": "#/components/schemas/Priors"
          },
          "n": {
            "description": "number of milk points in lactation",
            "type": "number"
          },
          "seMilk": {
            "type": "number"
          },
          "path": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Params"
            }
          }
        }
      },
      "Error": {
        "type": "object",
        "description": "error response per RFC 7807",
        "required": [
          "title",
          "status"
        ],
        "properties": {
          "errorType": {
            "type": "string",
            "description": "a URI identifier that categorizes the error",
            "example": "/errors/incorrect-user-pass"
          },
          "title": {
            "type": "string",
            "description": "A brief, human-readable message about the error",
            "example": "incorrect username or password"
          },
          "status": {
            "type": "integer",
            "description": "HTTP status code",
            "example": 400
          },
          "detail": {
            "type": "string",
            "description": "a human-readable description of the specific error",
            "example": "Authentication failed due to incorrect username or password."
          },
          "instance": {
            "type": "string",
            "description": "a URI that identifies the specific occurrence of the error",
            "example": "/login/log/abc123"
          }
        }
      }
    }
  }
}